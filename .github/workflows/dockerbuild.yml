name: Docker Image CI
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # Étape 1: Récupération du code avec historique pour accéder aux tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 2: Récupère le dernier tag si déclenché manuellement
      - name: Get latest tag if manual trigger
        id: get_tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          echo "MANUAL_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Utilisation du dernier tag: $LATEST_TAG"

      # Étape 3: Extrait les métadonnées
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            dydhzo/fkstream
            ghcr.io/${{ github.repository }}
          tags: |
            # Pour déclenchement automatique par tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=ref,event=tag
            # Pour déclenchement manuel, utilise le dernier tag
            type=raw,value=${{ env.MANUAL_TAG }},enable=${{ github.event_name == 'workflow_dispatch' }}

      # Étape 4: Configuration QEMU pour l'émulation ARM64
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Étape 5: Met en place Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Étape 6: Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Étape 7: Connexion à GitHub Container Registry (GHCR.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 8: Construit l'image Docker multi-architecture et la pousse sur les deux registres
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
