name: Docker Image CI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # Étape 1: Récupération du code avec tous les tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape 2: Récupère le dernier tag Git si workflow_dispatch
      - name: Get latest tag
        id: get_tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          echo "TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Utilisation du tag: $LATEST_TAG"

      # Étape 3: Configuration QEMU (CRITIQUE pour ARM64)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # Étape 4: Extrait les métadonnées pour Docker
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            dydhzo/fkstream
            ghcr.io/${{ github.repository }}
          tags: |
            # Pour déclenchement par tag Git
            type=ref,event=tag
            # Pour déclenchement manuel (utilise le dernier tag)
            type=raw,value=${{ env.TAG }},enable=${{ github.event_name == 'workflow_dispatch' }}
            # Toujours ajouter latest
            type=raw,value=latest

      # Étape 5: Configuration Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
          platforms: linux/amd64,linux/arm64

      # Étape 6: Vérification des plateformes disponibles (debug)
      - name: Inspect builder
        run: |
          docker buildx inspect --bootstrap
          echo "Available platforms: $(docker buildx inspect --bootstrap | grep "Platforms")"

      # Étape 7: Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Étape 8: Connexion à GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 9: Construction et publication de l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Désactive provenance qui peut causer des problèmes avec les builds multi-arch
          provenance: false
